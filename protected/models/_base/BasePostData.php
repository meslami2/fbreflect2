<?php

/**
 * This is the model base class for the table "post_data".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PostData".
 *
 * Columns in table "post_data" available as properties of the model,
 * followed by relations of table "post_data" available as properties of the model.
 *
 * @property string $id
 * @property string $friend
 * @property string $category
 * @property string $post_id
 * @property integer $seen
 * @property string $from_id
 * @property string $from_name
 * @property string $story
 * @property string $link
 * @property string $picture
 * @property string $source
 * @property string $name
 * @property string $description
 * @property string $message
 * @property string $user
 * @property string $created_time
 * @property integer $chosen
 * @property integer $changed
 *
 * @property Friend $friend0
 * @property Category $category0
 * @property User $user0
 */
abstract class BasePostData extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'post_data';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'PostData|PostDatas', $n);
	}

	public static function representingColumn() {
		return 'post_id';
	}

	public function rules() {
		return array(
			array('seen, chosen, changed', 'numerical', 'integerOnly'=>true),
			array('friend, category, user', 'length', 'max'=>20),
			array('post_id', 'length', 'max'=>100),
			array('from_id', 'length', 'max'=>64),
			array('from_name', 'length', 'max'=>200),
			array('story, link, picture, source, name, description, message, created_time', 'safe'),
			array('friend, category, post_id, seen, from_id, from_name, story, link, picture, source, name, description, message, user, created_time, chosen, changed', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, friend, category, post_id, seen, from_id, from_name, story, link, picture, source, name, description, message, user, created_time, chosen, changed', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'friend0' => array(self::BELONGS_TO, 'Friend', 'friend'),
			'category0' => array(self::BELONGS_TO, 'Category', 'category'),
			'user0' => array(self::BELONGS_TO, 'User', 'user'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'friend' => null,
			'category' => null,
			'post_id' => Yii::t('app', 'Post'),
			'seen' => Yii::t('app', 'Seen'),
			'from_id' => Yii::t('app', 'From'),
			'from_name' => Yii::t('app', 'From Name'),
			'story' => Yii::t('app', 'Story'),
			'link' => Yii::t('app', 'Link'),
			'picture' => Yii::t('app', 'Picture'),
			'source' => Yii::t('app', 'Source'),
			'name' => Yii::t('app', 'Name'),
			'description' => Yii::t('app', 'Description'),
			'message' => Yii::t('app', 'Message'),
			'user' => null,
			'created_time' => Yii::t('app', 'Created Time'),
			'chosen' => Yii::t('app', 'Chosen'),
			'changed' => Yii::t('app', 'Changed'),
			'friend0' => null,
			'category0' => null,
			'user0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('friend', $this->friend);
		$criteria->compare('category', $this->category);
		$criteria->compare('post_id', $this->post_id, true);
		$criteria->compare('seen', $this->seen);
		$criteria->compare('from_id', $this->from_id, true);
		$criteria->compare('from_name', $this->from_name, true);
		$criteria->compare('story', $this->story, true);
		$criteria->compare('link', $this->link, true);
		$criteria->compare('picture', $this->picture, true);
		$criteria->compare('source', $this->source, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('message', $this->message, true);
		$criteria->compare('user', $this->user);
		$criteria->compare('created_time', $this->created_time, true);
		$criteria->compare('chosen', $this->chosen);
		$criteria->compare('changed', $this->changed);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}